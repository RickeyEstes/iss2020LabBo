/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 val simulate = true
		   lateinit var firstActorInPipe : ActorBasic 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("sonar started")
						  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
									else firstActorInPipe = sysUtil.getActor("sonardatasource")!! 			//generates REAL data
									firstActorInPipe.subscribeLocalActor("datalogger").		//logs the data generated by the sonar
									subscribeLocalActor("datacleaner").		//removes 'wrong' data''
									subscribeLocalActor("distancefilter").	//propagates the event obstacle
									subscribeLocalActor("sonar") 
						if(  simulate  
						 ){forward("simulatorstart", "simulatorstart(qasource)" ,"sonarsimulator" ) 
						}
						else
						 {forward("simulatorstart", "simulatorstart(qasource)" ,"sonardatasource" ) 
						 }
					}
					 transition(edgeName="t00",targetState="handleEvent",cond=whenEvent("sonarRobot"))
					transition(edgeName="t01",targetState="handleEvent",cond=whenEvent("obstacle"))
				}	 
				state("handleEvent") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition(edgeName="t02",targetState="handleEvent",cond=whenEvent("sonarRobot"))
					transition(edgeName="t03",targetState="handleEvent",cond=whenEvent("obstacle"))
				}	 
			}
		}
}
