/*
 * This model gives essential and relevant information about
 * 	     STRUCTURE, INTERACTION and BEHAVIOR
 * about the system
 * 
 * The model is EXECUTABLE
 */

 	//"tcp://mqtt.eclipse.org:1883"
	//mqtt.eclipse.org
	//tcp://test.mosquitto.org
	//mqtt.fluux.io
	//"tcp://broker.hivemq.com" 

/*
 * Declares the messages and the events in explicit way
 */
System sonar 
mqttBroker "broker.hivemq.com" :  1883 eventTopic "unibo/sonar/events"

Dispatch simulatorstart     : simulator(V)  
Event    sonarRobot 		: sonar( V )   //emitted by sonarHCSR04SupportActor	
Event    obstacle           : obstacle(V)

Context ctxsonar ip [host="localhost" port=8068] 	 	 

CodedQActor sonarsimulator context ctxsonar className "rx.sonarSimulator"  

CodedQActor datalogger     context ctxsonar className "rx.dataLogger"
CodedQActor datacleaner    context ctxsonar className "rx.dataCleaner"
CodedQActor distancefilter context ctxsonar className "rx.distanceFilter"

CodedQActor sonardatasource context ctxsonar className "sensors.sonarHCSR04SupportActor"

QActor sonar context ctxsonar {     
[# val simulate = true
   lateinit var firstActorInPipe : ActorBasic 
#]
 	State s0 initial {  		 
  		println("sonar started") 
//   		qrun sensors.sonarHCSR04SupportActor.create(myself)
		//CREATE THE PIPE
		[#  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
			else firstActorInPipe = sysUtil.getActor("sonardatasource")!! 			//generates REAL data
			firstActorInPipe.subscribeLocalActor("datalogger").		//logs the data generated by the sonar
			subscribeLocalActor("datacleaner").		//removes 'wrong' data''
			subscribeLocalActor("distancefilter").	//propagates the event obstacle
			subscribeLocalActor("sonar") 
		#]  
		//ACTIVATE THE DATA SOURCE   
		if [# simulate #]{forward sonarsimulator -m simulatorstart : simulatorstart(qasource) }
		else{ forward sonardatasource -m simulatorstart : simulatorstart(qasource) }
  	} 
	  	Transition t0 whenEvent sonarRobot -> handleEvent
					  whenEvent obstacle   -> handleEvent
/*
 * WARNING: with MQTT active, the events are sent to this actor too
 * the sonar QUEUE could become full if the events are not elaborated
 */  	
  	State handleEvent{
  		printCurrentMessage
  	}
   	Transition t0 whenEvent sonarRobot -> handleEvent
   				  whenEvent obstacle  -> handleEvent
 }

