/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		   
		   var state   = false  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("led started")
					}
					 transition( edgeName="goto",targetState="waitCmd", cond=doswitch() )
				}	 
				state("waitCmd") { //this:State
					action { //it:State
					}
					 transition(edgeName="t00",targetState="firstClick",cond=whenEvent("buttonCmd"))
				}	 
				state("firstClick") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 state = true 	 
						updateResourceRep( "ledstate($state)"   
						)
					}
					 transition(edgeName="t01",targetState="secondClick",cond=whenEvent("buttonCmd"))
				}	 
				state("secondClick") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						 state = false 	 
						updateResourceRep( "ledstate($state)"   
						)
					}
					 transition(edgeName="t02",targetState="firstClick",cond=whenEvent("buttonCmd"))
				}	 
			}
		}
}
