/* Generated by AN DISI Unibo */ 
package it.unibo.roomboudaryexplorer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Roomboudaryexplorer ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var mapEmpty    = false
		val mapname     = "roomMbot3"  //"roomBoundary"		// 
		var Tback       = 0
		var NumStep     = 0
		 
		//REAL ROBOT
		//var StepTime   = 1000	 
		//var PauseTime  = 500 
		
		//VIRTUAL ROBOT
		var StepTime   = 330	 
		var PauseTime  = 250
		
		//var PauseTimeL  = PauseTime.toLong()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="detectBoundary", cond=doswitch() )
				}	 
				state("detectBoundary") { //this:State
					action { //it:State
						 NumStep++  
						itunibo.planner.plannerUtil.showMap(  )
					}
					 transition( edgeName="goto",targetState="doAheadMove", cond=doswitchGuarded({ (NumStep<5)  
					}) )
					transition( edgeName="goto",targetState="boundaryFound", cond=doswitchGuarded({! ( (NumStep<5)  
					) }) )
				}	 
				state("doAheadMove") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						request("step", "step($StepTime)" ,"basicrobot" )  
					}
					 transition(edgeName="t00",targetState="stepDone",cond=whenReply("stepdone"))
					transition(edgeName="t01",targetState="stepFail",cond=whenReply("stepfail"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						itunibo.planner.moveUtils.updateMapAfterAheadOk(myself)
						delay(500) 
					}
					 transition( edgeName="goto",targetState="doAheadMove", cond=doswitch() )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						println("&&&  FOUND WALL")
						
						val MapStr =  itunibo.planner.plannerUtil.getMapOneLine() 
						var Dt = 0L 
						//println( MapStr ) 
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(Time,Obs)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								 			   Dt = payloadArg(0).toLong()  
								println("stepFailed ${payloadArg(1).toString()}")
						}
						if(  Dt < 3*StepTime/4.0   
						 ){forward("cmd", "cmd(s)" ,"basicrobot" ) 
						delay(Dt)
						forward("cmd", "cmd(h)" ,"basicrobot" ) 
						}
						itunibo.planner.plannerUtil.wallFound(  )
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
					}
					 transition( edgeName="goto",targetState="detectBoundary", cond=doswitch() )
				}	 
				state("boundaryFound") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.saveMap( mapname  )
						println("FINAL MAP")
						itunibo.planner.moveUtils.showCurrentRobotState(  )
					}
				}	 
			}
		}
}
