/* Generated by AN DISI Unibo */ 
package it.unibo.led

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Led ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var led: Int
				var count=0 //To see the number of events
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Led initializing...")
					}
					 transition( edgeName="goto",targetState="off", cond=doswitch() )
				}	 
				state("off") { //this:State
					action { //it:State
						println("Led turning off...")
						led=0 
						println("Led: ${led}")
						if( checkMsgContent( Term.createTerm("onPressed(V)"), Term.createTerm("onPressed(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								count++ 
								println("Pressed received ${count}")
						}
					}
					 transition(edgeName="t00",targetState="on",cond=whenEvent("onPressed"))
				}	 
				state("on") { //this:State
					action { //it:State
						println("Led turning on...")
						led=1 
						println("Led: ${led}")
						if( checkMsgContent( Term.createTerm("onPressed(V)"), Term.createTerm("onPressed(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								count++ 
								println("Pressed received ${count}")
						}
					}
					 transition(edgeName="t01",targetState="off",cond=whenEvent("onPressed"))
				}	 
			}
		}
}
