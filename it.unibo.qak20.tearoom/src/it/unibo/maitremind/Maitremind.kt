/* Generated by AN DISI Unibo */ 
package it.unibo.maitremind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitremind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var XT = "0"
			var YT = "0"
			var CurrentPlannedMove = ""
			var StepTime    	   = 350L
			val BackTime           = 2 * StepTime / 3
			var obstacleFound      = false  
			val inmapname          = "teaRoomExplored" 
			
			var X_barman		= "0"
			var Y_barman		= "0"
			
			var X_entrancedoor  = "0"
			var Y_entrancedoor  = "0"
			
			var X_exitdoor      = "0"
			var Y_exitdoor      = "0"
			 
			var X_teatable1     = "0"
			var Y_teatable1     = "0"
		
			var X_teatable2     = "0"
			var Y_teatable2     = "0"
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( inmapname  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						solve("consult('tearoomkb.pl')","") //set resVar	
						solve("pos(entrancedoor,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_entrancedoor=getCurSol("X").toString() ;  Y_entrancedoor=getCurSol("Y").toString()  
						}
						else
						{}
						println("entrancedoor($X_entrancedoor, $Y_entrancedoor )")
						solve("pos(exitdoor,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_exitdoor = getCurSol("X").toString();  Y_exitdoor = getCurSol("Y").toString()  
						}
						else
						{}
						println("exitdoor($X_exitdoor, $Y_exitdoor )")
						solve("pos(barman,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_barman = getCurSol("X").toString();  Y_barman = getCurSol("Y").toString()  
						}
						else
						{}
						println("barman($X_barman, $Y_barman)")
						solve("pos(teatable1,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_teatable1 = getCurSol("X").toString();  Y_teatable1 = getCurSol("Y").toString()  
						}
						else
						{}
						println("teatable1($X_teatable1, $Y_teatable1)")
						solve("pos(teatable2,X,Y)","") //set resVar	
						if( currentSolution.isSuccess() ) { X_teatable2 = getCurSol("X").toString();  Y_teatable2 = getCurSol("Y").toString()  
						}
						else
						{}
						println("teatable2($X_teatable2, $Y_teatable2)")
					}
					 transition(edgeName="t00",targetState="controlTrip",cond=whenEvent("twstarted"))
				}	 
				state("controlTrip") { //this:State
					action { //it:State
						println("controlTrip. ")
						solve("stateOfTeatables(S)","") //set resVar	
						if( currentSolution.isSuccess() ) { val StateOfTables = getCurSol("S").toString(); println("maitremind $StateOfTables")  
						}
						else
						{}
						delay(1000) 
					}
					 transition( edgeName="goto",targetState="gotoEntrancedoor", cond=doswitch() )
				}	 
				state("gotoEntrancedoor") { //this:State
					action { //it:State
						forward("engage", "engage(2)" ,"teatables" ) 
						delay(1000) 
						println("Going to the entrancedoor havineg booked dteatable2... ")
						request("movetoCell", "movetoCell($X_entrancedoor,$Y_entrancedoor)" ,"maitrewalker" )  
					}
					 transition(edgeName="t01",targetState="gotoTable2",cond=whenReply("atcell"))
					transition(edgeName="t02",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("gotoTable2") { //this:State
					action { //it:State
						delay(1000) 
						println("Going to teatable2 ...")
						request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"maitrewalker" )  
					}
					 transition(edgeName="t03",targetState="gotoBarman",cond=whenReply("atcell"))
					transition(edgeName="t04",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("gotoBarman") { //this:State
					action { //it:State
						delay(1000) 
						println("Going to barman ...")
						request("movetoCell", "movetoCell($X_barman,$Y_barman)" ,"maitrewalker" )  
					}
					 transition(edgeName="t05",targetState="gotoTable2WithTea",cond=whenReply("atcell"))
					transition(edgeName="t06",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("gotoTable2WithTea") { //this:State
					action { //it:State
						delay(1000) 
						println("Going gotoTable2WithTea ...")
						request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"maitrewalker" )  
					}
					 transition(edgeName="t07",targetState="gotoExitdoor",cond=whenReply("atcell"))
					transition(edgeName="t08",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("gotoExitdoor") { //this:State
					action { //it:State
						delay(1000) 
						println("Going to exitdoor ...")
						request("movetoCell", "movetoCell($X_exitdoor,$Y_exitdoor)" ,"maitrewalker" )  
					}
					 transition(edgeName="t09",targetState="gotoTable2Clean",cond=whenReply("atcell"))
					transition(edgeName="t010",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("gotoTable2Clean") { //this:State
					action { //it:State
						delay(1000) 
						println("Going to gotoTable2Clean ...")
						request("movetoCell", "movetoCell($X_teatable2,$Y_teatable2)" ,"maitrewalker" )  
					}
					 transition(edgeName="t011",targetState="cleanTable2",cond=whenReply("atcell"))
					transition(edgeName="t012",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("cleanTable2") { //this:State
					action { //it:State
						delay(1000) 
						println("Going to gcleanTable2 ...")
						forward("clean", "clean(2)" ,"teatables" ) 
					}
					 transition(edgeName="t013",targetState="gotoExitdoor",cond=whenReply("atcell"))
					transition(edgeName="t014",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("gotoTable1") { //this:State
					action { //it:State
						delay(1000) 
						println("Going to teatable1 ...")
						request("movetoCell", "movetoCell($X_teatable1,$Y_teatable1)" ,"maitrewalker" )  
					}
					 transition(edgeName="t015",targetState="gotoHome",cond=whenReply("atcell"))
					transition(edgeName="t016",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("gotoHome") { //this:State
					action { //it:State
						delay(1000) 
						println("Going to home ...")
						request("movetoCell", "movetoCell(0,0)" ,"maitrewalker" )  
					}
					 transition(edgeName="t017",targetState="endOfTrip",cond=whenReply("atcell"))
					transition(edgeName="t018",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("endOfTrip") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						println("END OF TRIP ... BYE")
					}
				}	 
				state("unexpected") { //this:State
					action { //it:State
						println("There is something wrong ...")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}
