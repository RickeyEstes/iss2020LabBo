/* Generated by AN DISI Unibo */ 
package it.unibo.waitermind

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Waitermind ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 
			var XT = "0" 
			var YT = "0"
			var CurrentPlannedMove = ""
			var StepTime    	   = 350L
			val BackTime           = 2 * StepTime / 3
			var obstacleFound      = false  
			val inmapname          = "teaRoomExplored" 
			
		//	var X_barman		= "0"
		//	var Y_barman		= "0"
		//	
		//	var X_entrancedoor  = "0"
		//	var Y_entrancedoor  = "0"
		//	
		//	var X_exitdoor      = "0"
		//	var Y_exitdoor      = "0"
		//	 
		//	var X_teatable1     = "0"
		//	var Y_teatable1     = "0"
		//
		//	var X_teatable2     = "0"
		//	var Y_teatable2     = "0"
			
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
					}
					 transition(edgeName="t00",targetState="someQuery",cond=whenEvent("walkerstarted"))
				}	 
				state("someQuery") { //this:State
					action { //it:State
						println("waitermind | sending some query ... ")
						request("getroomstate", "getroomstate(tablestate(1,S))" ,"tearoom" )  
						delay(100) 
						request("getroomstate", "getroomstate(numfreetables(N))" ,"tearoom" )  
						delay(100) 
						request("getroomstate", "getroomstate(roomstate(W,T,D))" ,"tearoom" )  
					}
					 transition(edgeName="t01",targetState="handleAnswer",cond=whenReply("roomstate"))
				}	 
				state("handleAnswer") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						stateTimer = TimerActor("timer_handleAnswer", 
							scope, context!!, "local_tout_waitermind_handleAnswer", 100.toLong() )
					}
					 transition(edgeName="t02",targetState="listening",cond=whenTimeout("local_tout_waitermind_handleAnswer"))   
					transition(edgeName="t03",targetState="handleAnswer",cond=whenReply("roomstate"))
				}	 
				state("listening") { //this:State
					action { //it:State
						println("waitermind | listening while doing ... ")
					}
					 transition(edgeName="t04",targetState="schedule",cond=whenDispatch("enterrequest"))
					transition(edgeName="t05",targetState="schedule",cond=whenDispatch("paymentrequest"))
					transition(edgeName="t06",targetState="schedule",cond=whenDispatch("orderdone"))
				}	 
				state("schedule") { //this:State
					action { //it:State
					}
				}	 
				state("endOfTrip") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						println("END OF TRIP ... BYE")
					}
				}	 
				state("unexpected") { //this:State
					action { //it:State
						println("There is something wrong ...")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}
