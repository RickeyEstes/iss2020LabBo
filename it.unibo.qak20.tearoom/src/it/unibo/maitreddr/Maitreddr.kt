/* Generated by AN DISI Unibo */ 
package it.unibo.maitreddr

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Maitreddr ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
			var XT = "0"
			var YT = "0"
			var CurrentPlannedMove = ""
			var StepTime    	   = 350L
			val BackTime           = 2 * StepTime / 3
			var obstacleFound      = false  
			val inmapname          = "teaRoomExplored" 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.initAI(  )
						itunibo.planner.plannerUtil.loadRoomMap( inmapname  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						solve("consult('tearoom.pl')","") //set resVar	
						solve("pos(exitdoor,ODX,ODY)","") //set resVar	
						if( currentSolution.isSuccess() ) { val edx = getCurSol("ODX")
									   val edy = getCurSol("ODY") 
									   println("exitdoor: ($edx,$edy)")
						}
						else
						{}
						  
									 
								   val sol = pengine.solve( "pos( entrancedoor, EDX, EDY ).")
								    
								   if( sol.isSuccess() ){
									   val edx = sol.getVarValue("EDX").toString()
									   val edy = sol.getVarValue("EDY").toString()
									   println("entracedoor: ($edx,$edy)")
								   }else{
								   		println("sorry ...")
								   }
					}
				}	 
				state("reachPoint1") { //this:State
					action { //it:State
						println("Going to POINT1  (6,3) ...")
						 readLine()  
						request("movetoCell", "movetoCell(6,3)" ,"trustingwalker" )  
					}
					 transition(edgeName="t00",targetState="reachPoint2",cond=whenReply("atcell"))
					transition(edgeName="t01",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("reachPoint2") { //this:State
					action { //it:State
						println("Going to POINT2  (0,2) ...")
						delay(1000) 
						request("movetoCell", "movetoCell(0,2)" ,"trustingwalker" )  
					}
					 transition(edgeName="t02",targetState="reachHome",cond=whenReply("atcell"))
					transition(edgeName="t03",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("reachHome") { //this:State
					action { //it:State
						println("Going to home ...")
						delay(1000) 
						request("movetoCell", "movetoCell(0,0)" ,"trustingwalker" )  
					}
					 transition(edgeName="t04",targetState="endOfTrip",cond=whenReply("atcell"))
					transition(edgeName="t05",targetState="unexpected",cond=whenReply("walkbreak"))
				}	 
				state("endOfTrip") { //this:State
					action { //it:State
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						println("END OF TRIP ... BYE")
					}
				}	 
				state("unexpected") { //this:State
					action { //it:State
						println("There is something wrong ...")
						println("$name in ${currentState.stateName} | $currentMsg")
					}
				}	 
			}
		}
}
