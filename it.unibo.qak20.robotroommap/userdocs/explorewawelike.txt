System explorewawelike

Dispatch cmd       : cmd(MOVE)
 
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)

Dispatch doMove     : doMove(V)
Request  movetoCell : movetoCell(X,Y)
Reply    atcell     : atcell(X,Y)

Context ctxexplorewawelike   ip [host="localhost" port=8038]    
Context ctxbasicrobot        ip [host="192.168.1.22"   port=8020]   

ExternalQActor basicrobot    context ctxbasicrobot

QActor explorewawelike context ctxexplorewawelike{     
[#  var stepCounter        = 0
	var CurrentPlannedMove = ""
	var atHome             = true
	val maxNumSteps        = 4
	
	var obstacleFound      = false

//REAL ROBOT
//var StepTime   = 600	 
 
//VIRTUAL ROBOT
 var StepTime   = 350
#]	 
	State s0 initial {	     
		println("&&&  ctxexplorewawelike STARTED")
		run itunibo.planner.plannerUtil.initAI()
		delay 500 
		forward basicrobot -m cmd : cmd(l)
		delay 300
		forward basicrobot -m cmd : cmd(r)    
		delay 300
		println("INITIAL MAP") 
 		run itunibo.planner.plannerUtil.showMap() 
		run itunibo.planner.plannerUtil.startTimer()  
 	} 
	Goto  exploreStep  
	
	State exploreStep{
		[# stepCounter = stepCounter + 1 
		   //obstacleFound      = false			
		#]
		run itunibo.planner.plannerUtil.planForGoal("$stepCounter","$stepCounter")
 	} 
	//Goto execPlannedMoves  
 
	State execPlannedMoves{ 
 		[#  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove() #]
 	}
 	Goto wMove if [# CurrentPlannedMove == "w" #] else otherPlannedMove
 
 	State wMove {  
		request basicrobot -m step : step( $StepTime  )
 	} 	
 	Transition t0   whenReply stepdone   -> stepDone   
					whenReply stepfail   -> stepFailed 
	 
 	State stepDone{  
 		updateResource [# itunibo.planner.plannerUtil.getMapOneLine() #]
 		run itunibo.planner.plannerUtil.updateMap(  "w" )
  	}
	Goto execPlannedMoves if [# CurrentPlannedMove.length > 0 #] else testIfAtHome
	
	State stepFailed{  //has found an obstacle 
	    [# obstacleFound = true #]
 		println("explorewawelike | stepFailed")
		onMsg(stepfail : stepfail(DURATION, CAUSE) ){
			[# var Dt = payloadArg(0).toLong() / 4  #] 
			//println("explorewawelike | stepFail after: $Dt vs ${3*StepTime/4.0}")
			if [# Dt < 3*StepTime/4.0  #] {     
				forward basicrobot -m cmd : cmd( s )
				delayVar Dt
				forward basicrobot -m cmd : cmd( h )
			}	
 		}	    
 		run itunibo.planner.plannerUtil.updateMapObstacleOnCurrentDirection()
 		run itunibo.planner.plannerUtil.showCurrentRobotState()
 	}   
    //Goto replanforthesamegoal  //going out of synch ...
 	Goto backToHome
 	
 	
 	State otherPlannedMove{
  		if [# CurrentPlannedMove == "l" || CurrentPlannedMove == "r"  #]{
  			forward basicrobot -m cmd : cmd($CurrentPlannedMove)
 			run itunibo.planner.plannerUtil.updateMap( "$CurrentPlannedMove" )
  		} 
 	}   
 	Goto execPlannedMoves  if [# CurrentPlannedMove.length > 0 #] else testIfAtHome 
 	
	State backToHome{
 		println("explorewawelike |  going backToHome")
 		run itunibo.planner.plannerUtil.planForGoal("0","0")
	} 
	Goto  execPlannedMoves
	
	State testIfAtHome{}
 	Goto backToHome if[# ! itunibo.planner.plannerUtil.atHome()  #] else atHomeAgain 
 	
	State atHomeAgain{
		println("explorewawelike | atHomeAgain $stepCounter")
		run itunibo.planner.plannerUtil.showCurrentRobotState() 			
	}
	Goto tuneAndContinue
	
	State tuneAndContinue{
		println("tuneAndContinue ")
		[# val direction = itunibo.planner.plannerUtil.getDirection() 
		   readLine() 
		#] 
		
		if[# obstacleFound && direction == "upDir"  #]{
 			forward basicrobot -m cmd : cmd(w)
  			run itunibo.planner.plannerUtil.updateMap(  "w" )
  			delay 250 
 			
			forward basicrobot -m cmd : cmd(l)
			run itunibo.planner.plannerUtil.updateMap(  "l" )
			delay 250 
			
			forward basicrobot -m cmd : cmd(w)
 			run itunibo.planner.plannerUtil.updateMap(  "w" )
			delay 250 

			forward basicrobot -m cmd : cmd(l)
			run itunibo.planner.plannerUtil.updateMap(  "l" )
		}
		if[# obstacleFound &&  direction == "leftDir"  #]{
			forward basicrobot -m cmd : cmd(w)
//			run itunibo.planner.plannerUtil.updateMap(  "w" )
//			forward basicrobot -m cmd : cmd(r)	//up
			run itunibo.planner.plannerUtil.updateMap(  "r" )
			forward basicrobot -m cmd : cmd(w) 
//			run itunibo.planner.plannerUtil.updateMap(  "w" )
 			forward basicrobot -m cmd : cmd(r)
			run itunibo.planner.plannerUtil.updateMap(  "r" )
			forward basicrobot -m cmd : cmd(r)	//down
			run itunibo.planner.plannerUtil.updateMap(  "r" )
		}
		run itunibo.planner.plannerUtil.showCurrentRobotState()
		[# readLine() #]
	}
	Goto replanforthesamegoal if [# obstacleFound #] else continueToexplore
 	
 	
 	State continueToexplore{
 		println("explorewawelike | continueToexplore")
 		[# obstacleFound = false #]
 		//[# readLine() #]
 	}
   	Goto exploreStep if[# stepCounter < maxNumSteps #] else endOfJob 
 	
 	State replanforthesamegoal{
 		println("explorewawelike | replanforthesamegoal ($stepCounter,$stepCounter) ")
 		run itunibo.planner.plannerUtil.planForGoal("$stepCounter","$stepCounter")
 		[# obstacleFound = false
 		   //readLine() 
 		#] 
 	}
  	Goto execPlannedMoves  
 	
	State endOfJob{
		println("explorewawelike | endOfJob ")
		run itunibo.planner.plannerUtil.getDuration()
	}
 	
}    

