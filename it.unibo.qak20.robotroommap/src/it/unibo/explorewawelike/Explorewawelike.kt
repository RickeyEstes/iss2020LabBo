/* Generated by AN DISI Unibo */ 
package it.unibo.explorewawelike

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Explorewawelike ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		  var stepCounter        = 0
			var CurrentPlannedMove = ""
			var atHome             = true
			val maxNumSteps        = 4
			
			var obstacleFound      = false
		
		//REAL ROBOT
		//var StepTime   = 600	 
		 
		//VIRTUAL ROBOT
		 var StepTime   = 350
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("&&&  ctxexplorewawelike STARTED")
						itunibo.planner.plannerUtil.initAI(  )
						delay(500) 
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(300) 
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						delay(300) 
						println("INITIAL MAP")
						itunibo.planner.plannerUtil.showMap(  )
						itunibo.planner.plannerUtil.startTimer(  )
					}
					 transition( edgeName="goto",targetState="exploreStep", cond=doswitch() )
				}	 
				state("exploreStep") { //this:State
					action { //it:State
						 stepCounter = stepCounter + 1 
								   //obstacleFound      = false			
						itunibo.planner.plannerUtil.planForGoal( "$stepCounter", "$stepCounter"  )
					}
				}	 
				state("execPlannedMoves") { //this:State
					action { //it:State
						  CurrentPlannedMove = itunibo.planner.plannerUtil.getNextPlannedMove()  
					}
					 transition( edgeName="goto",targetState="wMove", cond=doswitchGuarded({ CurrentPlannedMove == "w"  
					}) )
					transition( edgeName="goto",targetState="otherPlannedMove", cond=doswitchGuarded({! ( CurrentPlannedMove == "w"  
					) }) )
				}	 
				state("wMove") { //this:State
					action { //it:State
						request("step", "step($StepTime)" ,"basicrobot" )  
					}
					 transition(edgeName="t00",targetState="stepDone",cond=whenReply("stepdone"))
					transition(edgeName="t01",targetState="stepFailed",cond=whenReply("stepfail"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						updateResourceRep( itunibo.planner.plannerUtil.getMapOneLine()  
						)
						itunibo.planner.plannerUtil.updateMap( "w"  )
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ CurrentPlannedMove.length > 0  
					}) )
					transition( edgeName="goto",targetState="testIfAtHome", cond=doswitchGuarded({! ( CurrentPlannedMove.length > 0  
					) }) )
				}	 
				state("stepFailed") { //this:State
					action { //it:State
						 obstacleFound = true  
						println("explorewawelike | stepFailed")
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(DURATION,CAUSE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Dt = payloadArg(0).toLong() / 4   
								if(  Dt < 3*StepTime/4.0   
								 ){forward("cmd", "cmd(s)" ,"basicrobot" ) 
								delay(Dt)
								forward("cmd", "cmd(h)" ,"basicrobot" ) 
								}
						}
						itunibo.planner.plannerUtil.updateMapObstacleOnCurrentDirection(  )
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="backToHome", cond=doswitch() )
				}	 
				state("otherPlannedMove") { //this:State
					action { //it:State
						if(  CurrentPlannedMove == "l" || CurrentPlannedMove == "r"   
						 ){forward("cmd", "cmd($CurrentPlannedMove)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "$CurrentPlannedMove"  )
						}
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitchGuarded({ CurrentPlannedMove.length > 0  
					}) )
					transition( edgeName="goto",targetState="testIfAtHome", cond=doswitchGuarded({! ( CurrentPlannedMove.length > 0  
					) }) )
				}	 
				state("backToHome") { //this:State
					action { //it:State
						println("explorewawelike |  going backToHome")
						itunibo.planner.plannerUtil.planForGoal( "0", "0"  )
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitch() )
				}	 
				state("testIfAtHome") { //this:State
					action { //it:State
					}
					 transition( edgeName="goto",targetState="backToHome", cond=doswitchGuarded({ ! itunibo.planner.plannerUtil.atHome()   
					}) )
					transition( edgeName="goto",targetState="atHomeAgain", cond=doswitchGuarded({! ( ! itunibo.planner.plannerUtil.atHome()   
					) }) )
				}	 
				state("atHomeAgain") { //this:State
					action { //it:State
						println("explorewawelike | atHomeAgain $stepCounter")
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
					}
					 transition( edgeName="goto",targetState="tuneAndContinue", cond=doswitch() )
				}	 
				state("tuneAndContinue") { //this:State
					action { //it:State
						println("tuneAndContinue ")
						 val direction = itunibo.planner.plannerUtil.getDirection() 
								   readLine() 
						if(  obstacleFound && direction == "upDir"   
						 ){forward("cmd", "cmd(w)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "w"  )
						delay(250) 
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "l"  )
						delay(250) 
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "w"  )
						delay(250) 
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "l"  )
						}
						if(  obstacleFound &&  direction == "leftDir"   
						 ){forward("cmd", "cmd(w)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "r"  )
						forward("cmd", "cmd(w)" ,"basicrobot" ) 
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "r"  )
						forward("cmd", "cmd(r)" ,"basicrobot" ) 
						itunibo.planner.plannerUtil.updateMap( "r"  )
						}
						itunibo.planner.plannerUtil.showCurrentRobotState(  )
						 readLine()  
					}
					 transition( edgeName="goto",targetState="replanforthesamegoal", cond=doswitchGuarded({ obstacleFound  
					}) )
					transition( edgeName="goto",targetState="continueToexplore", cond=doswitchGuarded({! ( obstacleFound  
					) }) )
				}	 
				state("continueToexplore") { //this:State
					action { //it:State
						println("explorewawelike | continueToexplore")
						 obstacleFound = false  
					}
					 transition( edgeName="goto",targetState="exploreStep", cond=doswitchGuarded({ stepCounter < maxNumSteps  
					}) )
					transition( edgeName="goto",targetState="endOfJob", cond=doswitchGuarded({! ( stepCounter < maxNumSteps  
					) }) )
				}	 
				state("replanforthesamegoal") { //this:State
					action { //it:State
						println("explorewawelike | replanforthesamegoal ($stepCounter,$stepCounter) ")
						itunibo.planner.plannerUtil.planForGoal( "$stepCounter", "$stepCounter"  )
						 obstacleFound = false
						 		   //readLine() 
					}
					 transition( edgeName="goto",targetState="execPlannedMoves", cond=doswitch() )
				}	 
				state("endOfJob") { //this:State
					action { //it:State
						println("explorewawelike | endOfJob ")
						itunibo.planner.plannerUtil.getDuration(  )
					}
				}	 
			}
		}
}
