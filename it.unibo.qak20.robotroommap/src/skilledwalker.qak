/* 
 * ================================================================================
 * skilledwalker.qak
 * VERSION June 1, 2020 
 * 
 * External MQTT sites:
 * 	"mqtt.eclipse.org:  mosquitto.org mqtt.fluux.io  broker.hivemq.com
 * ================================================================================
 */ 
System -trace skilledwalker
mqttBroker "mqtt.eclipse.org" : 1883 eventTopic "unibo/polar" 
Event    twstarted   : twstarted(X)

Request  movetoCell : movetoCell(X,Y)
Reply    atcell     : atcell(X,Y)
Reply	 walkbreak  : walkbreak(X,Y) 

Dispatch cmd       : cmd(MOVE)
Request step       : step( TIME )	
Reply   stepdone   : stepdone(V)  
Reply   stepfail   : stepfail(DURATION, CAUSE)

Context ctxskilledwalker         ip [host="localhost" port=8049]    
 
/*
 * The robot kowns the map of the room and reaches a sequence of cells that
 * it kones to be free, by using the trustingworker as a service
 */  

CodedQActor  trustingwalker context ctxskilledwalker className "it.unibo.trustingwalker.Trustingwalker"

QActor skilledwalker context ctxskilledwalker{  
[#
	var XT = "0"
	var YT = "0"
	var CurrentPlannedMove = ""
	var StepTime    	   = 350L
	val BackTime           = 2 * StepTime / 3
	var obstacleFound      = false  
	val inmapname          = "teaRoomExplored" 
#]
	State s0 initial {	
		//delay 1000 //give time to the   trustingwalker  to start ... 
 		run itunibo.planner.plannerUtil.initAI()
		run itunibo.planner.plannerUtil.loadRoomMap( inmapname ) 		
		run itunibo.planner.plannerUtil.showCurrentRobotState()		
	}	
	Transition t0 whenEvent twstarted -> reachPoint1
	
 	 
	State reachPoint1{
		println("Going to POINT1  (6,3) ...")
		[# readLine() #]
 		request trustingwalker -m movetoCell : movetoCell (6,3)
	}
	Transition t0 whenReply atcell ->  reachPoint2
				whenReply walkbreak -> unexpected
	
	State reachPoint2{
		println("Going to POINT2  (0,2) ...") 
		//[# readLine() #]
		delay 1000
		//run itunibo.planner.plannerUtil.showCurrentRobotState()
		request trustingwalker -m movetoCell : movetoCell(0,2)
	}
	Transition t0 whenReply atcell ->  reachHome
				whenReply walkbreak -> unexpected
		 
	State reachHome{
		println("Going to home ...")
		//[# readLine() #]
		delay 1000
		//run itunibo.planner.plannerUtil.showCurrentRobotState()
		request trustingwalker -m movetoCell : movetoCell (0,0)
	}
	Transition t0 whenReply atcell ->  endOfTrip
				whenReply walkbreak -> unexpected

    State endOfTrip{
    	run itunibo.planner.plannerUtil.showCurrentRobotState()
    	println("END OF TRIP ... BYE")
    }   
    
 	State unexpected{
 		println("There is something wrong ...")
		printCurrentMessage
	}
    
    
    
 }
 
  
  
 