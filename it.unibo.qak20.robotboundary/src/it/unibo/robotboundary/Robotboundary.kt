/* Generated by AN DISI Unibo */ 
package it.unibo.robotboundary

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotboundary ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
		var NumStep  = 0
		val StepTime = 350
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("robotboundary | START")
						discardMessages = true
						println("${mapRoomKotlin.mapUtil.refMapForTesting}")
						println("-----------------")
						mapRoomKotlin.mapUtil.showMap(  )
						delay(2000) 
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("waitcmd") { //this:State
					action { //it:State
						println("robotboundary | waitcmd")
					}
					 transition(edgeName="t00",targetState="work",cond=whenDispatch("start"))
				}	 
				state("work") { //this:State
					action { //it:State
						println("robotboundary | working ${NumStep}")
						updateResourceRep("working")
						request("step", "step($StepTime)" ,"basicrobot" )  
					}
					 transition(edgeName="t01",targetState="stopped",cond=whenDispatch("stop"))
					transition(edgeName="t02",targetState="stepDone",cond=whenReply("stepdone"))
					transition(edgeName="t03",targetState="stepFail",cond=whenReply("stepfail"))
				}	 
				state("stepDone") { //this:State
					action { //it:State
						println("robotboundary | stepDone  ")
						mapRoomKotlin.mapUtil.doMove( "w"  )
						mapRoomKotlin.mapUtil.showMap(  )
						delay(500) 
					}
					 transition( edgeName="goto",targetState="work", cond=doswitch() )
				}	 
				state("stepFail") { //this:State
					action { //it:State
						println("robotboundary | stepFail  ")
						println("$name in ${currentState.stateName} | $currentMsg")
						
									NumStep++
									var Dt = 0L 			
						if( checkMsgContent( Term.createTerm("stepfail(DURATION,CAUSE)"), Term.createTerm("stepfail(DURATION,CAUSE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 Dt = payloadArg(0).toLong()   
								println("robotboundary stepFail after: $Dt")
								if(( Dt < 3*StepTime/4 )){ forward("cmd", "cmd(s)" ,"basicrobot" ) 
								delay(Dt)
								forward("cmd", "cmd(h)" ,"basicrobot" ) 
								 }
								delay(1000) 
						}
						forward("cmd", "cmd(l)" ,"basicrobot" ) 
						delay(500) 
						mapRoomKotlin.mapUtil.doMove( "l"  )
					}
					 transition( edgeName="goto",targetState="work", cond=doswitchGuarded({(NumStep<4)}) )
					transition( edgeName="goto",targetState="endWork", cond=doswitchGuarded({! ((NumStep<4)) }) )
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("robotboundary | stopped")
						updateResourceRep("stopped")
					}
					 transition(edgeName="t04",targetState="work",cond=whenDispatch("resume"))
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("robotboundary | ends")
						updateResourceRep("terminated")
						terminate(0)
					}
				}	 
			}
		}
}
