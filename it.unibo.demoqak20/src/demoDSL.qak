System demo

Dispatch msg1 : msg1(ARG)
Dispatch msg2 : msg2(ARG)

Event   alarm : alarm(V)

Context ctxdemo ip [host="localhost" port=8055]

QActor demo context ctxdemo{
	State s0 initial { 	 
		  
 	}
 	Goto s1
 	
 	State s1{
 		println("demo in s1")
 	}
 	Transition t0 whenMsg msg1 -> s2
 				  whenMsg msg2 -> s3

 	State s2{
 		println("demo in s2")		
 	}
 	Transition t0 whenMsg msg2 -> s3

 	State s3{
  		println("demo in s3")		
 	}
 	Goto s1

}

QActor sentinel context ctxdemo{
["val counter=0"]
	State s0 initial { 	
		println("sentinel | STARTS")	 		  
 	}
 	Goto watch if "counter==0" else end
 	
 	State watch{
 		println("sentinel | WATCH")
 	}	
 	Transition t0 whenTime 1000   -> timeout
 				  whenEvent alarm and "counter==0" -> handleAlarm
 	
 	State timeout{
   		printCurrentMessage
  		println("sentinel | TIMEOUT")	
  		["counter++"]	
 	}
 	Goto s0
 	 
 	State handleAlarm{
  		printCurrentMessage
  		onMsg ( alarm : alarm(V) ) {
  			println("sentinel | ALARM ${payloadArg(0)} ")  // 
  		}
   	}
 	Goto s0 
 	
 	State end{
 		println("sentinel | ENDS")	
 	}
 
 }

QActor sender context ctxdemo{
	State s0 initial { 	
//		 forward demo -m msg1 : msg1(1)
//		 delay 300
//		 forward demo -m msg1 : msg1(2)
//		 delay 300
//		 forward demo -m msg2 : msg2(1)
		 
		 emit alarm : alarm( fire )
		 delay 1200
		 emit alarm : alarm( tsunami )
	}
	
}
