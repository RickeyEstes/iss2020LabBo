/* Generated by AN DISI Unibo */ 
package it.unibo.robotboundary

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Robotboundary ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	@kotlinx.coroutines.ObsoleteCoroutinesApi
	@kotlinx.coroutines.ExperimentalCoroutinesApi			
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
					}
					 transition( edgeName="goto",targetState="waitcmd", cond=doswitch() )
				}	 
				state("waitcmd") { //this:State
					action { //it:State
						println("boundaryrobot | REQUIREMENT: init")
					}
					 transition(edgeName="t00",targetState="walk",cond=whenDispatch("start"))
				}	 
				state("walk") { //this:State
					action { //it:State
						println("boundaryrobot |  REQUIREMENT: walk")
						updateResourceRep( "walk"  
						)
						stateTimer = TimerActor("timer_walk", 
							scope, context!!, "local_tout_robotboundary_walk", 2000.toLong() )
					}
					 transition(edgeName="t01",targetState="endWork",cond=whenTimeout("local_tout_robotboundary_walk"))   
					transition(edgeName="t02",targetState="stopped",cond=whenDispatch("stop"))
				}	 
				state("stopped") { //this:State
					action { //it:State
						println("boundaryrobot | REQUIREMENT: stopped")
						updateResourceRep( "stopped"  
						)
					}
					 transition(edgeName="t03",targetState="walk",cond=whenDispatch("resume"))
				}	 
				state("endWork") { //this:State
					action { //it:State
						println("boundaryrobot | REQUIREMENT: homeagain")
						updateResourceRep( "homeagain"  
						)
						terminate(0)
					}
				}	 
			}
		}
}
