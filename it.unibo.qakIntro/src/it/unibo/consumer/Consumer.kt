/* Generated by AN DISI Unibo */ 
package it.unibo.consumer

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Consumer ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("consumer | START")
						utils.virtualRobotSupportQak.initClientConn(myself)
					}
					 transition( edgeName="goto",targetState="waitinfo", cond=doswitch() )
				}	 
				state("waitinfo") { //this:State
					action { //it:State
					}
					 transition(edgeName="t10",targetState="execcmd",cond=whenDispatch("cmd"))
					transition(edgeName="t11",targetState="endwork",cond=whenDispatch("end"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						println("consumer | handleObstacle")
					}
					 transition( edgeName="goto",targetState="waitinfo", cond=doswitch() )
				}	 
				state("execcmd") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("cmd(MOVE)"), Term.createTerm("cmd(MOVE)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								utils.virtualRobotSupportQak.doApplMove( payloadArg(0)  )
						}
					}
					 transition( edgeName="goto",targetState="waitinfo", cond=doswitch() )
				}	 
				state("endwork") { //this:State
					action { //it:State
						println("consumer | endwork")
						utils.virtualRobotSupportQak.terminate(  )
						forward("end", "end(0)" ,"sensorobserver" ) 
						terminate()
						
					}
				}	 
			}
		}
}
