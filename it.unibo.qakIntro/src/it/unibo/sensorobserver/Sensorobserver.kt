/* Generated by AN DISI Unibo */ 
package it.unibo.sensorobserver

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sensorobserver ( name: String, scope: CoroutineScope ) : ActorBasicFsm( name, scope){
 	
	override fun getInitialState() : String{
		return "s0"
	}
		
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
					}
					 transition(edgeName="t02",targetState="handleCollision",cond=whenEvent("collision"))
					transition(edgeName="t03",targetState="endwork",cond=whenDispatch("end"))
				}	 
				state("handleCollision") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("endwork") { //this:State
					action { //it:State
						println("sensorobserver | endwork")
						terminate()
					}
				}	 
			}
		}
}
