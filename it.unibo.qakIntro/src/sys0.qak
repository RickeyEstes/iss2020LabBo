System sys0
Dispatch cmd       : cmd(MOVE)
Dispatch end       : end(ARG)

Event    collision : collision(TARGET)

Context ctx0 ip [host="localhost" port=8075]

QActor producer context ctx0{
	State s0 initial { 	
		println("producer | START")
		delay 1000
		forward consumer -m cmd : cmd(w)
		delay 1000
		forward consumer -m cmd : cmd(h)
		delay 1000
		forward consumer -m end : end(0)
		["terminate()"]
	}
}

QActor consumer context ctx0{
	State s0 initial { 	
		println("consumer | START")		
 		run utils.virtualRobotSupportQak.initClientConn( myself )
	}
	Goto waitinfo
	
	State waitinfo{
	}
	Transition t1 whenMsg   cmd  -> execcmd
				  whenMsg   end  -> endwork
				  
	State handleObstacle{
		//printCurrentMessage
		println("consumer | handleObstacle")		
	}
	Goto waitinfo 
	
	State execcmd{
		printCurrentMessage
		onMsg( cmd : cmd(MOVE) ){
			run utils.virtualRobotSupportQak.doApplMove( payloadArg(0) )
		}
	}
	Goto waitinfo 
	
	State endwork{ 
		println("consumer | endwork")
		run utils.virtualRobotSupportQak.terminate( )
		forward sensorobserver -m end : end(0)
		["terminate()"]
	}
	
}

QActor sensorobserver context ctx0{
	State s0 initial { 	
		//println("sensorobserver | START")
	}
	Transition t0 whenEvent collision -> handleCollision
				  whenMsg   end       -> endwork
	State handleCollision{
		printCurrentMessage
	}
	Goto s0
	
	State endwork{
		println("sensorobserver | endwork")
		["terminate()"]
	}
	
}